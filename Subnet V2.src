host = get_shell.host_computer

old = 0
newpass = user_input("Do you want to try and inject a new password for a user where possible?").lower
	if ["y","yes","Y","Yes","YES"].indexOf(newpass)!=null then
		newpass = user_input("Enter new Password: ")
		end if

if current_path == null then
	current_path = host.current_path
	old = 1
end if

crypto = include_lib("/lib/crypto.so")
if crypto == null then crypto = include_lib(current_path+"/crypto.so")
if crypto == null then exit("[-] Failed to import crypto.so")

meta = include_lib("/lib/metaxploit.so")
if meta == null then meta = include_lib(current_path+"/metaxploit.so")
if meta == null then exit("[-] Failed to import metaxploit.so")

clean = function(str)
	while typeof(str.indexOf("\n\n")) != "null"
		str = str.replace("\n\n", "\n")
	end while
	return str
end function

colors = {}

colors["+"] = "#00bc8c"
colors["!"] = "#f39c12"
colors["-"] = "#e74c3c"

colors["?"] = "#3498db"
colors["i"] = "#adb5bd"

log = function(str)
	type = str.split(" ")[0]
	color = "#ffffff"
	if type.indexOf("[") == 0 and type.indexOf("]") == 2 then
		color = colors[slice(type, 1, 2)]
	end if
	
	print("<color="+color+">"+str+"</color>")
end function

input = function(str)
	type = str.split(" ")[0]
	color = "#ffffff"
	if type.indexOf("[") == 0 and type.indexOf("]") == 2 then
		color = colors[slice(type, 1, 2)]
	end if
	
	return user_input("<color="+color+">"+str+"</color>")
end function

b = ["B", "K", "M", "G", "T", "P", "E", "Z", "Y"]

padStr = function (str, len)
	if str.len > len then return str
	newLen = len - str.len
	return str + (" " * newLen)
end function

hr = function(size)
	i = 0
	while size > 1024
		size = size / 1024
		i = i + 1
	end while
	size = round(size, 1)
	if 0.1 > size then size = 0.1
	return size + b[i]
end function

calcColor = function(file)
	if file.is_folder then return colors["?"]
	if file.has_permission("x") then return colors["+"]
	return false
end function

formatFile = function(file, name, color)
	if color == null then color = calcColor(file)
	
	data = file.permissions + " "
	data = data + file.owner + " "
	data = data + file.group + " "
	data = data + hr(file.size.val) + " "
	
	if color != false then data = data + "<color=" + color + ">"
	
	if name == null then data = data + file.name
	if name != null then data = data + name
	
	if color != false then data = data + "</color>"
	
	return data
end function

checkAccess = function(file)
	while file.parent != null
		file = file.parent
	end while
	
	for f in file.get_folders
		if f.name == "root" then
			if f.has_permission("w") and f.has_permission("r") and f.has_permission("x") then
				return "root"
			end if
		end if
		if f.name == "home" then
			file = f
		end if
	end for
	
	for f in file.get_folders
		if f.name == "guest" then continue
		if f.has_permission("w") and f.has_permission("r") and f.has_permission("x") then
			return f.name
		end if
	end for
	
	return "guest"
end function

fs = function(file)
	while true
		args = input(file.path + "$ ").split(" ")
		if args.len < 1 then continue
		command = args[0]
		if command == "exit" then return true
		if command == "cat" then
			if args.len != 2 then
				print(command_info("cat_usage"))
				continue
			end if
			for f in file.get_files
				if f.name == args[1] then
					if f.is_binary then
						print("cat: can't open " + file.path + ". Binary file")
						continue
					end if
					if not f.has_permission("r") then
						print("cat: permission denied")
						continue
					end if
					print(f.get_content)
				end if
			end for
		end if
		if command == "cd" then
			if args.len != 2 then
				print(command_info("cd_usage"))
				continue
			end if
			if args[1] == ".." then
				file = file.parent
			else
				if args[1][0] == "/" then
					while file.path != "/"
						file = file.parent
					end while
				end if
				for f in file.get_folders
					if args[1][0] == "/" then
						paths = args[1].split("/")
						print(paths)
						if f.path == args[1] then
							file = f
						end if
					else
						if f.name == args[1] then
							file = f
						end if
					end if
				end for
			end if
		end if
		if command == "ls" then
			data = formatFile(file, ".")
			
			if file.path != "/" then
				data = data + "\n"
				data = data + formatFile(file.parent, "..")
			end if
			
			for f in file.get_folders
				data = data + "\n" + formatFile(f)
			end for
			for f in file.get_files
				data = data + "\n" + formatFile(f)
			end for
			print(format_columns(data))
		end if
	end while
end function

found = {}

checkPort = function(ip, port)
	log("[i] Checking port " + port)
	
	v = meta.net_use(ip, port)
	if v == null then
		log("[-] Port " + port + " is inaccessible.")
		return
	end if
	lib = v.dump_lib
	log("[i] Found " + lib.lib_name + " v" + lib.version)
	log("[i] Scanning for vulnerabilities...")
	
	vulns = meta.scan(lib)
	done = false
	
	for vuln in vulns
		if done then break
		log("[i] Scanning <b>" + vuln + "</b>")
		v = meta.scan_address(lib, vuln).split("\n")
		
		for fvuln in v
			if fvuln == "" then continue
			if fvuln.indexOf("*") == 0 then continue
			s = fvuln.indexOf("<b>") + "<b>".len
			e = fvuln.indexOf("</b>")
			val = slice(fvuln, s, e)
			if(val == null) then continue
			
			log("[i] Exploiting <b>" + val + "</b>")
			result = lib.overflow(vuln, val, newpass)
			if(typeof(result) == "null") then
				continue
			end if
			
			log("[+] Obtained <b>" + typeof(result) + "</b>")
			
			if not found.hasIndex(typeof(result)) then
				found[typeof(result)] = {}
			end if
			
			id = found[typeof(result)].len
			
			found[typeof(result)][id] = {}
			found[typeof(result)][id]["type"] = typeof(result)
			found[typeof(result)][id]["object"] = result
			
			file = null
			
			if(typeof(result) == "shell") then
				file = result.host_computer.File("/home/guest/")
			end if
			
			if(typeof(result) == "file") then
				while result.path != "/"
					result = result.parent
				end while
				
				for f in result.get_folders
					if f.name == "home" then
						result = f
					end if
				end for
				
				for f in result.get_folders
					if f.name == "guest" then
						result = f
					end if
				end for
				
				file = result
			end if
			
			if(typeof(result) == "computer") then
				file = result.File("/home/guest/")
			end if
			
			if file != null then
				found[typeof(result)][id]["user"] = checkAccess(file)
			else
				found[typeof(result)][id]["user"] = "N/A (guest?)"
			end if
		end for
	end for
end function

probe = function(ip)
	log("[i] Probing <b>" + ip + "</b>")
	r = get_router(ip)
	if r == null then return
	p = r.used_ports
	done = false
	checkPort(ip, 0)
	for port in p
		if done then break
		if port.is_closed then
			log("[-] Port " + port.port_number + " is closed")
			continue
		end if
		checkPort(ip, port.port_number)
	end for
	log("[i] Results:")
	for f in found
		print("<b>" + f.key + "</b>: " + f.value.len)
		for v in f.value
			o = v.value
			print(v.key + ") " + o.user)
		end for
	end for
	log("[i] To select an exploit, type " + char(34) + "<type> <id>" + char(34) + " (eg: shell 1)")
	while true
		args = input("[?] Select exploit: ").split(" ")
		
		if args.len != 2 then
			log("[i] To select an exploit, type " + char(34) + "<type> <id>" + char(34) + " (eg: shell 1)")
			continue
		end if
		
		if not found.hasIndex(args[0]) then
			log("[!] Unknown exploit.")
			continue
		end if
		
		args[1] = args[1].val
		
		if not found[args[0]].hasIndex(args[1]) then
			log("[!] Invalid ID.")
			continue
		end if
		
		choice = found[args[0]][args[1]]
		object = choice.object
		
		log("[i] Type: <b>" + typeof(object) + "</b>.")
		
		if typeof(object) == "computer" then fs(object.File("/"))
		if typeof(object) == "shell" then object.start_terminal()
		if typeof(object) == "file" then fs(object)
	end while
end function

if params.len == 1 then
	e = false
	
	if is_valid_ip(params[0]) then
		probe(params[0])
		e = true
	else
		ip = nslookup(params[0])
		if ip == "Not found" then ip = nslookup("www." + params[0])
		if ip != "Not found" then
			probe(ip)
			e = true
		else
			log("[!] Invalid IP: " + params[0])
		end if
	end if
	
	if e then
		log("[+] Done.")
	end if
else
	file = program_path.split("/")[-1]
	log("[!] Usage: "+file+" [ip]")
end if